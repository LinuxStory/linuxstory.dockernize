##
#  File:
#    wordpress
#  Description:
#    This file is meant to offer a basic guide to get a Wordpress site up and
#    running on Nginx. This file should be almost drop-in if the user is able
#    to understand the three lines that need to be changed.
##

fastcgi_cache_path /fastcgi-cache levels=1:2 keys_zone=WORDPRESS:300m inactive=60m;
fastcgi_cache_key "$scheme$request_method$host$request_uri";

server {
	listen 80;
	listen 443 ssl http2;
	server_name WP_SERVER_NAME;


	access_log /var/log/nginx/WP_SERVER_NAME.access.log;
	error_log /var/log/nginx/WP_SERVER_NAME.error.log;

	if ($scheme = http) {
		return 301 https://$server_name$uri;
	}

	add_header Strict-Transport-Security "max-age=63072000";

	root WP_SITE_ROOT;

	ssl_certificate WP_CERT_PATH;
	ssl_certificate_key WP_CERT_KEY_PATH;

	index index.php index.html;

	set $skip_cache 0;

	if ($request_method = POST) {
		set $skip_cache 1;
	}
	if ($query_string != "") {
		set $skip_cache 1;
	}
	if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {
		set $skip_cache 1;
	}
	if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
		set $skip_cache 1;
	}

	location = /favicon.ico {
		log_not_found off;
		access_log off;
	}

	# This is for the robots.txt file used by search engines.
	location = /robots.txt {
		allow all;
		log_not_found off;
		access_log off;
	}

	# This location block protects against a known attack. It happens if
	# the attacker uploads a non-php file and attempts to run it as a
	# php file on the server.
	location ~ \..*/.*\.php$ {
		return 403;
	}

	# This is our primary location block. The try_files directive will
	# attempt to serve the data in the order listed. First try the exact
	# request (such as an image or text file). If it doesn't exist, see if
	# the directory exists. If not, then we move to the last options which
	# passes the request to /index.php with the requested query.
	location / {
		try_files $uri $uri/ /index.php?q=$uri&$args;
	}

	location /en/ {
		try_files $uri $uri/ /en/index.php?q=$uri&$args;
	}

	# If a PHP file is served, this block will handle the request. This block
	# works on the assumption you are using php-cgi listening on /tmp/phpcgi.socket.
	# Please see the php example (usr/share/doc/nginx/exmaples/php) for more
	# information about setting up PHP.
	# NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
	location ~ \.php$ {
		fastcgi_index index.php;
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
		include fastcgi_params;
		fastcgi_intercept_errors on;
		fastcgi_pass unix:/var/run/php/php7.3-fpm.sock;
		fastcgi_cache_bypass $skip_cache;
		fastcgi_no_cache $skip_cache;
		fastcgi_cache WORDPRESS;
		fastcgi_cache_valid  60m;
	}

	location ~* ^.+\.(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
		access_log off;
		log_not_found off;
		expires max;
	}

	# include global/w3-total-cache.conf;
}

